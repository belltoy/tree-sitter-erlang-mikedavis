================================================================================
strings
================================================================================

""       %% empty string
"hello, world!"
"hello ""world"
"hello, \"tree-sitter\"\n"
"hello, 'tree-sitter'"

--------------------------------------------------------------------------------

(source
  (string)
  (comment)
  (string
    (quoted_content))
  (string
    (quoted_content))
  (string
    (quoted_content))
  (string
    (quoted_content)
    (escape_sequence)
    (quoted_content)
    (escape_sequence)
    (escape_sequence))
  (string
    (quoted_content)
    (quoted_content)
    (quoted_content)
    (quoted_content)))

================================================================================
atoms
================================================================================

ok
hello
'%'      %% escaping '%'
'123'
'\''     %% this confusing atom is used in the compiler's scanner

--------------------------------------------------------------------------------

(source
  (atom)
  (atom)
  (quoted_atom
    (quoted_content))
  (comment)
  (quoted_atom
    (quoted_content))
  (quoted_atom
    (escape_sequence))
  (comment))

================================================================================
numbers
================================================================================

$a        %% erlang docs consider characters to be numbers
$-
$\n
$รท        %% unicode allowed
$         %% space character
1
100
1_000_000
2#101101
16#deadbeef
1.01
2.3e3
2.3e-3
0.1
2_000.000_002

--------------------------------------------------------------------------------

(source
  (character)
  (comment)
  (character)
  (character
    (escape_sequence))
  (character)
  (comment)
  (character)
  (comment)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (float)
  (float)
  (float)
  (float)
  (float))

================================================================================
variables
================================================================================

Variable
_
_Ignore
Var1
Var@1

--------------------------------------------------------------------------------

(source
  (variable)
  (variable)
  (variable)
  (variable)
  (variable))

================================================================================
bitstrings
================================================================================

<<>>
<<"hello, binaries!">>
<<MyBinary>>
<<$a, $b, $c>>
<<String0/bitstring,0:(8-Rem)>>
<<N:Bytes/unit:8>>
<<0.1:10/native-unsigned>>
<<"hello" ++ _>>

--------------------------------------------------------------------------------

(source
  (bitstring)
  (bitstring
    (string
      (quoted_content)))
  (bitstring
    (variable))
  (bitstring
    (character)
    (character)
    (character))
  (bitstring
    (binary_operator
      (variable)
      (atom))
    (binary_operator
      (integer)
      (binary_operator
        (integer)
        (variable))))
  (bitstring
    (binary_operator
      (binary_operator
        (variable)
        (variable))
      (binary_operator
        (atom)
        (integer))))
  (bitstring
    (binary_operator
      (binary_operator
        (binary_operator
          (float)
          (integer))
        (atom))
      (atom)))
  (bitstring
    (binary_operator
      (string
        (quoted_content))
      (variable))))

================================================================================
tuples
================================================================================

{}
{a, b, c}
{{{}}}

--------------------------------------------------------------------------------

(source
  (tuple)
  (tuple
    (atom)
    (atom)
    (atom))
  (tuple
    (tuple
      (tuple))))

================================================================================
lists
================================================================================

[]
[a, b, c]
[[[]]]
[a | [b | [c]]]
[from_asm, {validate, false}]

--------------------------------------------------------------------------------

(source
  (list)
  (list
    (atom)
    (atom)
    (atom))
  (list
    (list
      (list)))
  (list
    (binary_operator
      (atom)
      (list
        (binary_operator
          (atom)
          (list
            (atom))))))
  (list
    (atom)
    (tuple
      (atom)
      (atom))))

================================================================================
maps
================================================================================

#{}
#{a => b, c => d}
MyMap#{a => b}
MyMap#{a := b}

--------------------------------------------------------------------------------

(source
  (map)
  (map
    (map_content
      (binary_operator
        (atom)
        (atom))
      (binary_operator
        (atom)
        (atom))))
  (map
    (variable)
    (map_content
      (binary_operator
        (atom)
        (atom))))
  (map
    (variable)
    (map_content
      (binary_operator
        (atom)
        (atom)))))

================================================================================
records
================================================================================

#function{entry = 1}
#Var{}
#function
MyFunction#function{entry = 1}
#function.entry     %% syntax for the element's index in the tuple
Name = (Mod#mod.name)#literal.val

--------------------------------------------------------------------------------

(source
  (record
    (atom)
    (record_content
      (binary_operator
        (atom)
        (integer))))
  (record
    (variable))
  (record
    (atom))
  (record
    (variable)
    (atom)
    (record_content
      (binary_operator
        (atom)
        (integer))))
  (record
    (atom)
    (atom))
  (comment)
  (binary_operator
    (variable)
    (record
      (record
        (variable)
        (atom)
        (atom))
      (atom)
      (atom))))

================================================================================
functions
================================================================================

fun (X) -> X end
fun (X) when X > 0 -> X; (Y) -> 0 - Y end
fun
  Last([_H|T]) -> Last(T);
  Last([H]) -> H
end
fun (X) ->
  Y = X + 1,
  Y
end

--------------------------------------------------------------------------------

(source
  (anonymous_function
    (stab_clause
      (arguments
        (variable))
      (variable)))
  (anonymous_function
    (stab_clause
      (arguments
        (variable))
      (guard
        (binary_operator
          (variable)
          (integer)))
      (variable))
    (stab_clause
      (arguments
        (variable))
      (binary_operator
        (integer)
        (variable))))
  (anonymous_function
    (stab_clause
      (variable)
      (arguments
        (list
          (binary_operator
            (variable)
            (variable))))
      (call
        (variable)
        (arguments
          (variable))))
    (stab_clause
      (variable)
      (arguments
        (list
          (variable)))
      (variable)))
  (anonymous_function
    (stab_clause
      (arguments
        (variable))
      (body
        (binary_operator
          (variable)
          (binary_operator
            (variable)
            (integer)))
        (variable)))))

================================================================================
function captures
================================================================================

fun Module:Name/Arity
fun lists:map/2

--------------------------------------------------------------------------------

(source
  (function_capture
    (variable)
    (variable)
    (variable))
  (function_capture
    (atom)
    (atom)
    (integer)))
